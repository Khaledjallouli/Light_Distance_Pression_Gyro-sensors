#include "main.h"
#include "MadgwickAHRS.h"

#define PI 3.14159265359

//====================================================================
#define VL6180X	0
#define MPU9250	1
#define MPL115A_ANEMO 0
//====================================================================
//			CAN ACCEPTANCE FILTER
//====================================================================
#define USE_FILTER	1
// Can accept until 4 Standard IDs
#define ID_1	0x01
#define ID_2	0x02
#define ID_3	0x03
#define ID_4	0x04
//====================================================================
extern void systemClock_Config(void);

void (*rxCompleteCallback) (void);
void can_callback(void);

CAN_Message      rxMsg;
CAN_Message      txMsg;
long int        counter = 0;

uint8_t* aTxBuffer[2];

extern float magCalibration[3];

void VL6180x_Init(void);
void VL6180x_Step(void);

int status;
int new_switch_state;
int switch_state = -1;

//====================================================================
// >>>>>>>>>>>>>>>>>>>>>>>>>> MAIN <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
//====================================================================
int main(void)
{
	HAL_Init();
	systemClock_Config();
    SysTick_Config(HAL_RCC_GetHCLKFreq() / 1000); //SysTick end of count event each 1ms
	uart2_Init();


#if VL6180X || MPU9250
	i2c1_Init();
#endif

	HAL_Delay(1000); // Wait

#if MPL115A_ANEMO
    spi1_Init();
    anemo_Timer1Init();
#endif

#if VL6180X
    VL6180x_Init();
#endif

#if MPU9250
    mpu9250_InitMPU9250();
    mpu9250_CalibrateMPU9250();
#if USE_MAGNETOMETER
    mpu9250_InitAK8963(magCalibration);
#endif
    uint8_t response=0;
	response =  mpu9250_WhoAmI();
	term_printf("%d",response);
#endif


    can_Init();
    can_SetFreq(CAN_BAUDRATE); // CAN BAUDRATE : 500 MHz -- cf Inc/config.h
#if USE_FILTER
    can_Filter_list((ID_1<<21)|(ID_2<<5) , (ID_3<<21)|(ID_4<<5) , CANStandard, 0); // Accept until 4 Standard IDs
#else
    can_Filter_disable(); // Accept everybody
#endif
    can_IrqInit();
    can_IrqSet(&can_callback);

    txMsg.id=0x55;
    txMsg.data[0]=1;
    txMsg.data[1]=2;
    txMsg.len=2;
    txMsg.format=CANStandard;
    txMsg.type=CANData;

    can_Write(txMsg);


    // Décommenter pour utiliser ce Timer ; permet de déclencher une interruption toutes les N ms
    // Le programme d'interruption est dans tickTimer.c
    tickTimer_Init(5); // period in ms

    while (1) {

#if VL6180X
    VL6180x_Step();
#endif

#if MPU9250

#endif

    }
	return 0;
}


//====================================================================
//			CAN CALLBACK RECEPT
//====================================================================

void can_callback(void)
{
	CAN_Message msg_rcv;
	int i=0;

	can_Read(&msg_rcv);
	txMsg.id=0x55;			// Identifiant du message à envoyer

	for(i=0;i<8;i++)
	{
	txMsg.data[i]=msg_rcv.data[i]+1;
	}
	txMsg.len=8;			// Nombre d'octets à envoyer
	txMsg.format=CANStandard;
	txMsg.type=CANData;

	can_Write(txMsg);
}
//====================================================================
//			TIMER CALLBACK PERIOD
//====================================================================
CAN_Message  ImuMsg;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//tester htim si il y a plusieurs timer pour les call back
{
	//term_printf("from timer interrupt\n\r");
	float tab[6];
	int16_t tabbrut[6];

	    mpu9250_Step(tabbrut);
	   // term_printf("%d",tab[0]);
	    //Acceleration
	    tab[0]=(4.0/32768.0)*(float)tabbrut[0];//ax
	    tab[1]=(4.0/32768.0)*(float)tabbrut[1];//ay
	    tab[2]=(4.0/32768.0)*(float)tabbrut[2];//az
	    //Acceleration Angulaire
	    tab[3]=(1000.0/32768.0)*(PI/180.0)*(float)tabbrut[3];//gx
	    tab[4]=(1000.0/32768.0)*(PI/180.0)*(float)tabbrut[4];//gy
	    tab[5]=(1000.0/32768.0)*(PI/180.0)*(float)tabbrut[5];//gz
	    //Algo MadgwickAHRS
	    MadgwickAHRSupdateIMU(tab[3], tab[4], tab[5], tab[0], tab[1], tab[2]);


	    float R11=q0*q0+q1*q1-q2*q2-q3*q3;
	    float R12=2.0*(q1*q2-q0*q3);
	    float R13=2.0*(q1*q3+q0*q2);
	    float R21=2.0*(q0*q3+q1*q2);
	    float R22=q0*q0-q1*q1+q2*q2-q3*q3;
	    float R23=2.0*(q2*q3-q0*q1);
	    float R31=2.0*(q1*q3+q0*q2);
	    float R32=2.0*(q2*q3+q0*q1);
	    float R33=q0*q0-q1*q1-q2*q2+q3*q3;

	    float phi=atan2(-R31,R33);
		float teta=asin(R32);
		float nu=atan2(-R12,R22);

		//Conversion en degrés
		phi=phi*(180.0/PI);
		teta=teta*(180.0/PI);
		nu=nu*(180.0/PI);
		//term_printf("phi:%d teta:%d nu:%d  \n\r",(int)phi,(int)teta,(int)nu);


		int intphi=(int)(phi*1000.0);
		int intteta=(int)(teta*1000.0);
		int intnu=(int)(nu*1000.0);



	    ImuMsg.id=0x70;
	  //  term_printf("%d \n",tab[0]*1000);
	    ImuMsg.data[0]=intphi>>8; //>>8 deuxieme rien
	    ImuMsg.data[1]=intphi;//on multiplie par 1000 pour avoir des chiffres après la virgule il faut les diviser par 100 du coté QT
	    ImuMsg.data[2]=intteta>>8;
	    ImuMsg.data[3]=intteta;
	    ImuMsg.data[4]=intnu>>8;
	    ImuMsg.data[5]=intnu;
	    ImuMsg.len=6;
	    ImuMsg.format=CANStandard;
	    ImuMsg.type=CANData;
	    can_Write(ImuMsg);


}
//====================================================================

void VL6180x_Init(void)
{
	uint8_t id;
	State.mode = 1;

    XNUCLEO6180XA1_Init();
    HAL_Delay(500); // Wait
    // RESET
    XNUCLEO6180XA1_Reset(0);
    HAL_Delay(10);
    XNUCLEO6180XA1_Reset(1);
    HAL_Delay(1);

    HAL_Delay(10);
    VL6180x_WaitDeviceBooted(theVL6180xDev);
    id=VL6180x_Identification(theVL6180xDev);
    term_printf("id=%d, should be 180 (0xB4) \n\r", id);
    VL6180x_InitData(theVL6180xDev);

    State.InitScale=VL6180x_UpscaleGetScaling(theVL6180xDev);
    State.FilterEn=VL6180x_FilterGetState(theVL6180xDev);

     // Enable Dmax calculation only if value is displayed (to save computation power)
    VL6180x_DMaxSetState(theVL6180xDev, DMaxDispTime>0);

    switch_state=-1 ; // force what read from switch to set new working mode
    State.mode = AlrmStart;
}
//====================================================================
void VL6180x_Step(void)
{
    DISP_ExecLoopBody();

    new_switch_state = XNUCLEO6180XA1_GetSwitch();
    if (new_switch_state != switch_state) {
        switch_state=new_switch_state;
        status = VL6180x_Prepare(theVL6180xDev);
        // Increase convergence time to the max (this is because proximity config of API is used)
        VL6180x_RangeSetMaxConvergenceTime(theVL6180xDev, 63);
        if (status) {
            AbortErr("ErIn");
        }
        else{
            if (switch_state == SWITCH_VAL_RANGING) {
                VL6180x_SetupGPIO1(theVL6180xDev, GPIOx_SELECT_GPIO_INTERRUPT_OUTPUT, INTR_POL_HIGH);
                VL6180x_ClearAllInterrupt(theVL6180xDev);
                State.ScaleSwapCnt=0;
                DoScalingSwap( State.InitScale);
            } else {
                 State.mode = RunAlsPoll;
                 InitAlsMode();
            }
        }
    }

    switch (State.mode) {
    case RunRangePoll:
        RangeState();
        break;

    case RunAlsPoll:
        AlsState();
        break;

    case InitErr:
        TimeStarted = g_TickCnt;
        State.mode = WaitForReset;
        break;

    case AlrmStart:
       GoToAlaramState();
       break;

    case AlrmRun:
        AlarmState();
        break;

    case FromSwitch:
        // force reading swicth as re-init selected mode
        switch_state=!XNUCLEO6180XA1_GetSwitch();
        break;

    case ScaleSwap:

        if (g_TickCnt - TimeStarted >= ScaleDispTime) {
            State.mode = RunRangePoll;
            TimeStarted=g_TickCnt; /* reset as used for --- to er display */
        }
        else
        {
        	DISP_ExecLoopBody();
        }
        break;

    default: {
    	 DISP_ExecLoopBody();
          if (g_TickCnt - TimeStarted >= 5000) {
              NVIC_SystemReset();
          }
    }
    }
}
//====================================================================

